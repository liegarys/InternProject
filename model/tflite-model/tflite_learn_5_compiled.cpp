/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 02.08.2024 08:05:37

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 6640;
#else
constexpr int kTensorArenaSize = 5616;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,650 } };
const ALIGN(16) float tensor_data1[8] = { -0.60133844614028931, -0.19983424246311188, -0.32621663808822632, -0.60511898994445801, -0.29537269473075867, -0.37389850616455078, -0.55829113721847534, -0.42299249768257141, };
const TfArray<1, int> tensor_dimension1 = { 1, { 8 } };
const ALIGN(16) float tensor_data2[16] = { -0.046750988811254501, -0.27096360921859741, -0.052695255726575851, -0.18954178690910339, -0.061696749180555344, -0.017087787389755249, -0.16621039807796478, -0.28746166825294495, -0.25073692202568054, -0.079437755048274994, 0.77601861953735352, 0.14679558575153351, 0.18375857174396515, 0.18760396540164948, -0.22568424046039581, 0.15551114082336426, };
const TfArray<1, int> tensor_dimension2 = { 1, { 16 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 50, 13, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 50, 1, 8, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data5[4] = { 1, 1, 25, 8, };
const TfArray<1, int> tensor_dimension5 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data6[4] = { 1, 25, 1, 16, };
const TfArray<1, int> tensor_dimension6 = { 1, { 4 } };
const ALIGN(16) float tensor_data7[8*1*3*13] = { 
  /* [0][0][][] */ 0.39672198891639709,0.38919785618782043,-0.10490214824676514,-0.16440880298614502,-0.10460959374904633,0.13671240210533142,0.33328011631965637,-0.22388449311256409,-0.089150004088878632,-0.0086003849282860756,0.040193472057580948,-0.43428871035575867,0.18047158420085907, 0.16595347225666046,0.10038707405328751,-0.044178344309329987,-0.19856986403465271,-0.41174420714378357,0.28488397598266602,0.22742307186126709,0.02067430317401886,-0.31398078799247742,0.44888505339622498,-0.091399945318698883,-0.10556529462337494,-0.011848188936710358, 0.35062792897224426,0.21792629361152649,0.21021454036235809,-0.170763298869133,-0.26858827471733093,0.49095508456230164,0.31580847501754761,-0.090459570288658142,-0.43221572041511536,-0.0049566379748284817,-0.023532334715127945,0.23550540208816528,0.27049928903579712, 
  /* [1][0][][] */ -0.26567867398262024,-0.22860552370548248,0.081359468400478363,-0.10372298955917358,-0.10437877476215363,0.70075869560241699,-0.030086871236562729,-0.05322561040520668,-0.08655925840139389,-0.24131225049495697,-0.019806277006864548,0.089135371148586273,0.093034692108631134, -0.22809499502182007,0.11347297579050064,0.028593650087714195,-0.58021008968353271,-0.28765708208084106,0.52434104681015015,0.23473177850246429,-0.16131791472434998,-0.28780269622802734,-0.020621657371520996,0.087686777114868164,0.17692996561527252,-0.13069070875644684, -0.30582886934280396,0.17697702348232269,-0.22508232295513153,-0.18772539496421814,-0.10751665383577347,0.11787769943475723,0.28599539399147034,-0.071195699274539948,-0.19258008897304535,-0.12304390966892242,-0.10840437561273575,0.14730577170848846,0.037825081497430801, 
  /* [2][0][][] */ 0.26321902871131897,0.61860483884811401,-0.23283582925796509,-0.28319588303565979,0.024804640561342239,-0.028005911037325859,0.28755038976669312,0.172999307513237,-0.083693012595176697,0.13166959583759308,0.053310737013816833,-0.44656842947006226,-0.016050515696406364, -0.025366403162479401,0.14540363848209381,-0.16602495312690735,-0.28544017672538757,-0.085804618895053864,0.41152822971343994,0.24602599442005157,0.27270695567131042,-0.10323075950145721,0.049121983349323273,-0.36662000417709351,-0.12417122721672058,-0.018884507939219475, 0.032864518463611603,0.059425856918096542,-0.076469898223876953,-0.53990298509597778,-0.15388908982276917,0.50989174842834473,0.32405591011047363,0.15226365625858307,-0.051054306328296661,0.0847511887550354,0.26934453845024109,-0.19827103614807129,-0.1035698726773262, 
  /* [3][0][][] */ -0.07485535740852356,-0.022690963000059128,-0.11211042851209641,-0.28498220443725586,0.12575040757656097,0.16613036394119263,0.11120335757732391,0.086705662310123444,-0.087296582758426666,-0.16485343873500824,-0.31967964768409729,-0.26990467309951782,-0.33090400695800781, 0.23186187446117401,0.34367832541465759,0.20076958835124969,0.55304992198944092,0.08074524998664856,-0.22424140572547913,-0.15044865012168884,0.11900637298822403,-0.0079659726470708847,0.13249830901622772,0.21576511859893799,0.20335526764392853,0.21435528993606567, 0.2944340705871582,-0.23051539063453674,0.42044913768768311,-0.04602506011724472,0.054862674325704575,0.16199769079685211,0.32301077246665955,0.289326012134552,0.43901976943016052,0.17297108471393585,-0.082954049110412598,-0.076045893132686615,-0.23082570731639862, 
  /* [4][0][][] */ 0.12138285487890244,0.036998804658651352,-0.31389862298965454,0.5460471510887146,-0.13149918615818024,-0.35096195340156555,-0.43923190236091614,0.32766377925872803,0.29535475373268127,0.15405750274658203,-0.021121203899383545,0.11531099677085876,-0.0015661497600376606, 0.22602273523807526,0.028123211115598679,0.11372587829828262,-0.41258448362350464,-0.21295015513896942,-0.32122927904129028,-0.30857658386230469,0.18861301243305206,0.016590477898716927,-0.17579782009124756,-0.053149688988924026,-0.18244029581546783,0.11983463913202286, -0.29224121570587158,-0.25502693653106689,-0.14585980772972107,0.1363762766122818,-0.0079403519630432129,-0.13859608769416809,-0.18603487312793732,-0.15704739093780518,-0.26827824115753174,-0.30050557851791382,-0.11071088165044785,-0.092833027243614197,-0.026174705475568771, 
  /* [5][0][][] */ -0.38254773616790771,-0.34300315380096436,-0.1589229553937912,-0.13500261306762695,0.22132442891597748,-0.27528035640716553,-0.37366542220115662,0.061777401715517044,-0.15744233131408691,0.1122744232416153,0.23485487699508667,0.18418528139591217,0.35321459174156189, 0.04420924186706543,-0.44600754976272583,-0.1951233446598053,-0.16783633828163147,0.2295827716588974,0.24830399453639984,0.251851886510849,0.22642761468887329,0.073583625257015228,-0.16299743950366974,-0.18758705258369446,-0.27641770243644714,-0.24487675726413727, 0.10005459189414978,0.093385256826877594,-0.040392424911260605,-0.26642388105392456,-0.12259916961193085,0.51652127504348755,0.045768987387418747,0.39614877104759216,0.35806006193161011,0.1547398567199707,0.10551146417856216,0.014704336412250996,0.25752344727516174, 
  /* [6][0][][] */ 0.16036133468151093,0.35268211364746094,0.059118989855051041,-0.18255360424518585,0.12943381071090698,0.097739420831203461,-0.070188857614994049,-0.31178963184356689,-0.15092916786670685,-0.42392078042030334,0.13697008788585663,0.31818598508834839,-0.22549581527709961, 0.052424270659685135,0.26389223337173462,-0.027762498706579208,-0.0065392456017434597,0.35397085547447205,0.45785170793533325,-0.054731689393520355,-0.064010277390480042,-0.25293424725532532,-0.49562618136405945,0.078460253775119781,-0.059067301452159882,-0.23028175532817841, 0.33051693439483643,0.29792049527168274,0.12098187953233719,0.13922066986560822,0.18043628334999084,-0.20793715119361877,0.021802809089422226,0.020187655463814735,-0.39564862847328186,-0.11745510995388031,-0.30407339334487915,0.125017449259758,-0.025703223422169685, 
  /* [7][0][][] */ 0.18517671525478363,-0.11134524643421173,0.070497229695320129,0.32028293609619141,0.20774902403354645,0.46225184202194214,-0.12616251409053802,0.10103011876344681,-0.36153578758239746,-0.49589842557907104,0.26535376906394958,-0.077161766588687897,-0.033453259617090225, -0.050156164914369583,-0.061739195138216019,0.090358346700668335,0.27933168411254883,0.39103022217750549,0.02916552871465683,0.25905007123947144,-0.097387745976448059,-0.22629193961620331,-0.55262637138366699,-0.12680445611476898,0.13940103352069855,-0.27920547127723694, -0.26739108562469482,0.23687104880809784,0.0068283146247267723,0.20745281875133514,-0.056184917688369751,-0.030370887368917465,0.32123637199401855,0.1438325047492981,-0.16048206388950348,-0.40960103273391724,-0.12149439752101898,0.062415074557065964,-0.046465963125228882, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 8,1,3,13 } };
const ALIGN(16) float tensor_data8[16*1*3*8] = { 
  /* [0][0][][] */ 0.20296131074428558,0.11111129820346832,0.30640515685081482,0.20928803086280823,-0.059887450188398361,-0.06567072868347168,-0.0066005736589431763,-0.18987545371055603, -0.071617841720581055,0.066935867071151733,-0.13020570576190948,0.20568369328975677,-0.14265337586402893,0.17057418823242188,0.43534320592880249,-0.18831205368041992, 0.0194268599152565,-0.15973012149333954,-0.22792914509773254,-0.098426505923271179,-0.05237109586596489,0.036732837557792664,0.23305845260620117,0.24139943718910217, 
  /* [1][0][][] */ -0.04007803276181221,-0.0095591666176915169,0.043091364204883575,0.18036051094532013,0.027262592688202858,-0.38552483916282654,-0.14058989286422729,0.088275469839572906, -0.12808607518672943,-0.12020289897918701,-0.04799334704875946,0.0011721969349309802,-0.03301919624209404,0.014918368309736252,0.37777149677276611,0.5518602728843689, 0.17015248537063599,0.056292016059160233,0.026342900469899178,-0.22780638933181763,-0.17206954956054688,-0.38334733247756958,-0.17995838820934296,-0.25407350063323975, 
  /* [2][0][][] */ 0.0058834850788116455,0.10884629935026169,0.05502975732088089,-0.29822301864624023,-0.014226092025637627,-0.37045860290527344,-0.064904823899269104,-0.031745027750730515, 0.038100928068161011,0.1996302455663681,0.15055714547634125,-0.2211194783449173,-0.016095532104372978,-0.61405390501022339,-0.064843825995922089,0.39199835062026978, -0.191388338804245,-0.0071160756051540375,0.10051821917295456,-0.19492678344249725,-0.098782353103160858,-0.38195911049842834,0.52162963151931763,-0.095390662550926208, 
  /* [3][0][][] */ 0.031896352767944336,-0.51282960176467896,0.059120666235685349,-0.23736423254013062,0.22330020368099213,-0.30558744072914124,0.060416720807552338,0.040202122181653976, -0.052698981016874313,-0.29155632853507996,-0.25263336300849915,-0.020167302340269089,0.035136684775352478,-0.40845018625259399,-0.015670716762542725,-0.023010406643152237, -0.19256404042243958,-0.45412707328796387,-0.60725545883178711,0.013479721732437611,0.26445278525352478,-0.42618754506111145,0.23619553446769714,0.42875653505325317, 
  /* [4][0][][] */ -0.51916682720184326,-0.16048859059810638,-0.64030230045318604,-0.12300228327512741,-0.13854512572288513,-0.24917891621589661,0.42185842990875244,-0.039675258100032806, -0.17614300549030304,-0.30183437466621399,-0.017594313248991966,-0.15979239344596863,0.040327198803424835,0.23126024007797241,-0.096100203692913055,-0.40557712316513062, 0.41486948728561401,0.054799061268568039,0.2313026487827301,-0.11221586912870407,-0.052616100758314133,-0.010833544656634331,-0.10210470855236053,-0.6913834810256958, 
  /* [5][0][][] */ -0.45354518294334412,0.28930407762527466,-0.13049183785915375,-0.084177330136299133,-0.1615028977394104,-0.010720284655690193,-0.30526015162467957,0.37935778498649597, -0.63825154304504395,0.17336258292198181,-0.35176330804824829,-0.40415197610855103,0.056543514132499695,0.34015747904777527,-0.53698134422302246,0.040367189794778824, -0.30256620049476624,0.32312455773353577,-0.13378793001174927,-0.11158010363578796,-0.090116024017333984,0.006536729633808136,-0.45331013202667236,0.15775933861732483, 
  /* [6][0][][] */ 0.66109609603881836,-0.063500441610813141,0.080037966370582581,-0.32960811257362366,-0.20226113498210907,-0.19516366720199585,0.28760972619056702,-0.076207339763641357, 0.074187099933624268,-0.21813617646694183,-0.058007694780826569,-0.30925050377845764,0.072114057838916779,-0.46041962504386902,0.28589892387390137,0.27183395624160767, 0.02502891980111599,-0.35239493846893311,-0.081679433584213257,-0.21721689403057098,0.024414567276835442,-0.11298786848783493,-0.026890302076935768,-0.180935338139534, 
  /* [7][0][][] */ -0.26389002799987793,0.11406464129686356,-0.2983013391494751,-0.11624951660633087,-0.13361507654190063,0.61055314540863037,0.0015966931823641062,-0.075642615556716919, 0.2896178662776947,0.031714614480733871,0.062302980571985245,0.42120718955993652,0.04368998110294342,0.38483807444572449,-0.065184101462364197,-0.16564647853374481, -0.076982229948043823,-0.15553253889083862,-0.12533152103424072,-0.23552747070789337,0.055143639445304871,-0.17353692650794983,0.43827462196350098,-0.11366985738277435, 
  /* [8][0][][] */ -0.014103343710303307,0.070837013423442841,0.00062832236289978027,0.16464105248451233,-0.16759181022644043,-0.082763351500034332,0.20472405850887299,-0.001337890513241291, -0.036165501922369003,-0.11232755333185196,0.053311090916395187,0.60935962200164795,0.36809316277503967,0.14820945262908936,-0.13876836001873016,0.089023225009441376, 0.00011992992949672043,-0.012241559103131294,0.064553923904895782,0.39100998640060425,-0.19626587629318237,-0.098301954567432404,-0.12984973192214966,-0.022776737809181213, 
  /* [9][0][][] */ -0.064361326396465302,-0.0672159343957901,-0.073010444641113281,0.051478218287229538,-0.39856624603271484,0.11292251944541931,0.1603936105966568,0.040630482137203217, -0.27710875868797302,0.069667309522628784,-0.29806286096572876,-0.19955195486545563,-0.50923943519592285,0.41927206516265869,0.026430642232298851,0.10292162746191025, 0.030693696811795235,0.073731258511543274,-0.17775817215442657,0.095561131834983826,-0.33923602104187012,0.26718094944953918,-0.21811898052692413,0.30973955988883972, 
  /* [10][0][][] */ -0.43278497457504272,-0.2392943948507309,-0.35640567541122437,0.2390921413898468,0.0077278218232095242,0.035155750811100006,0.096497751772403717,0.16672198474407196, -0.8669813871383667,-0.43556708097457886,-0.31847178936004639,-0.00220464076846838,-0.3077663779258728,-0.17258214950561523,-0.084284134209156036,0.076695702970027924, -0.86263203620910645,-0.32809987664222717,-0.65560084581375122,0.062327612191438675,-0.4321766197681427,-0.11804918944835663,-0.1887228935956955,0.22692304849624634, 
  /* [11][0][][] */ -0.2743605375289917,0.12145687639713287,-0.23224376142024994,0.46146199107170105,0.49496603012084961,-0.11960871517658234,-0.1327715665102005,-0.20477226376533508, -0.10835179686546326,-0.037003431469202042,-0.098596379160881042,0.19776363670825958,0.53833729028701782,-0.063482247292995453,-0.15042406320571899,-0.10927542299032211, -0.23228062689304352,0.052448403090238571,-0.22218343615531921,-0.015845512971282005,-0.2325001060962677,-0.16782101988792419,-0.20240426063537598,-0.18036234378814697, 
  /* [12][0][][] */ -0.53728991746902466,0.30883201956748962,-0.51110762357711792,0.29202795028686523,-0.17776909470558167,0.035344928503036499,-0.037231240421533585,-0.14458395540714264, -0.13247139751911163,-0.20195929706096649,-0.44821721315383911,-0.13607032597064972,-0.16017012298107147,0.01743675023317337,-0.23627115786075592,-0.1131247952580452, 0.051596876233816147,0.24751363694667816,-0.054555557668209076,-0.058605201542377472,0.025723610073328018,-0.79091811180114746,0.021558968350291252,0.45982906222343445, 
  /* [13][0][][] */ 0.11884088814258575,-0.039751783013343811,0.1221921294927597,-0.14299790561199188,-0.24825708568096161,-0.0546233169734478,-0.41715997457504272,0.01377810537815094, 0.16964691877365112,0.075345933437347412,0.016706718131899834,-0.14192180335521698,-0.25181224942207336,-0.082519352436065674,-0.33706557750701904,-0.19583877921104431, -0.26350778341293335,0.19955195486545563,0.56317239999771118,-0.24702885746955872,-0.15745994448661804,-0.079009920358657837,-0.26735755801200867,-0.1692686527967453, 
  /* [14][0][][] */ 0.25108137726783752,-0.12519276142120361,0.048762790858745575,-0.091614075005054474,-0.13301281630992889,0.21037755906581879,-0.11371993273496628,-0.49748289585113525, 0.18174991011619568,0.17265141010284424,0.45812863111495972,0.12917634844779968,-0.00818609818816185,0.038993947207927704,0.12488614022731781,-0.46954575181007385, 0.2977813184261322,-0.16251252591609955,-0.10964533686637878,0.098726488649845123,-0.012656279839575291,-0.011345181614160538,0.059654261916875839,-0.34957635402679443, 
  /* [15][0][][] */ 0.3234083354473114,0.39609965682029724,-0.10398662090301514,-0.52765935659408569,-0.071488440036773682,-0.11166399717330933,-0.27935007214546204,0.17146708071231842, -0.084788963198661804,0.28936630487442017,0.084159702062606812,-0.38424700498580933,-0.17971986532211304,-0.35792350769042969,-0.062880903482437134,0.038401130586862564, -0.04627281054854393,0.16260814666748047,0.095785953104496002,-0.24968057870864868,-0.1022726371884346,-0.38837176561355591,0.091640658676624298,0.22584187984466553, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,1,3,8 } };
const ALIGN(16) float tensor_data9[5] = { 0.18677304685115814, 0.049413066357374191, -0.063149489462375641, 0.023632248863577843, -0.21302556991577148, };
const TfArray<1, int> tensor_dimension9 = { 1, { 5 } };
const ALIGN(8) int32_t tensor_data10[2] = { -1, 208, };
const TfArray<1, int> tensor_dimension10 = { 1, { 2 } };
const ALIGN(16) float tensor_data11[5*208] = { 
  0.0098910583183169365, 0.044917996972799301, -0.015701636672019958, 0.13001126050949097, -0.50678688287734985, 0.012319213710725307, -0.14549055695533752, -0.00016352924285456538, 0.20266751945018768, -0.057836249470710754, -0.33444437384605408, 0.24871313571929932, -0.063394784927368164, -0.28228488564491272, -0.057840678840875626, -0.0078391311690211296, 0.25818353891372681, 0.013523798435926437, -0.088149994611740112, 0.29950714111328125, -0.20632921159267426, 0.040281381458044052, -0.05818837508559227, -0.044179346412420273, 0.01222713477909565, 0.13882791996002197, 0.033516153693199158, 0.038930933922529221, 0.10127668082714081, -0.20807322859764099, -0.058010533452033997, -0.22290122509002686, -0.078303530812263489, 0.23458920419216156, 0.097435265779495239, 0.12007045745849609, -0.4849969744682312, -0.12350273132324219, -0.049664929509162903, -0.005787351168692112, 0.18094435334205627, 0.10420230776071548, 0.18438369035720825, 0.099996030330657959, -0.25901365280151367, 0.11647985130548477, 0.12039613723754883, -0.31092259287834167, -0.11212934553623199, 0.14476269483566284, -0.1545473039150238, 0.16406433284282684, -0.22055432200431824, 0.25857099890708923, -0.33875364065170288, -0.022411473095417023, 0.032979376614093781, 0.14716152846813202, -0.0088792331516742706, 0.21810083091259003, 0.10945219546556473, -0.24247319996356964, -0.16110782325267792, -0.42277228832244873, -0.12149545550346375, -0.24243445694446564, -0.11532001197338104, 0.04151540994644165, -0.34710904955863953, 0.18775501847267151, -0.27657872438430786, 0.16957792639732361, -0.019500857219099998, 0.01693924143910408, -0.57437968254089355, 0.1092798113822937, -0.14007428288459778, -0.20448532700538635, -0.16274280846118927, 0.057722844183444977, -0.27599436044692993, -0.10119904577732086, -0.10622519254684448, -0.19490090012550354, -0.30908694863319397, 0.30561617016792297, -0.34453797340393066, 0.047979541122913361, 0.15160256624221802, 0.074118107557296753, -0.19643519818782806, 0.094072811305522919, 0.17781339585781097, -0.057352028787136078, -0.19975654780864716, 0.14344705641269684, -0.031449910253286362, -0.16818507015705109, 0.05938306450843811, -0.13551749289035797, -0.21986973285675049, 0.30499577522277832, -0.33508843183517456, -0.015513288788497448, -0.25228932499885559, 0.26130396127700806, -0.19956000149250031, 0.0081068892031908035, 0.12800312042236328, 0.019188569858670235, -0.20518195629119873, 0.19020386040210724, -0.10941746085882187, 0.022622305899858475, 0.040374577045440674, 0.11603253334760666, -0.19599568843841553, 0.2209056168794632, -0.31501385569572449, 0.019606472924351692, -0.1694529801607132, 0.078918620944023132, -0.22609244287014008, -0.066898196935653687, 0.21151962876319885, -0.0054719927720725536, -0.26924562454223633, 0.041401095688343048, -0.22312527894973755, -0.16751728951931, -0.062090162187814713, -0.32963353395462036, -0.16258256137371063, 0.034170076251029968, -0.57238924503326416, -0.041353292763233185, 0.0057610552757978439, -0.076003767549991608, -0.20166690647602081, 0.14212556183338165, 0.24210302531719208, 0.27524343132972717, -0.20985406637191772, 0.14524704217910767, -0.075833000242710114, 0.22584360837936401, 0.28480753302574158, -0.1402839869260788, -0.090921789407730103, 0.099857039749622345, -0.4088362455368042, 0.15837590396404266, -0.081912331283092499, -0.039198573678731918, -0.057457283139228821, 0.18325440585613251, 0.1833207756280899, 0.19211824238300323, 0.15354743599891663, 0.21365915238857269, -0.038349416106939316, -0.093683280050754547, 0.13092502951622009, -0.57749289274215698, -0.15926355123519897, 0.14095316827297211, -0.12757056951522827, 0.012104477733373642, -0.16202913224697113, -0.13295570015907288, -0.25435006618499756, -0.26600262522697449, 0.096697866916656494, 0.10791848599910736, -0.054100271314382553, 0.13495621085166931, -0.11114715039730072, 0.35144433379173279, 0.12972347438335419, -0.27902016043663025, -0.20484794676303864, 0.085725642740726471, -0.33916574716567993, -0.20395398139953613, -0.34481191635131836, -0.0075545110739767551, -0.016052493825554848, 0.19805876910686493, 0.36811667680740356, 0.077712938189506531, -0.24035394191741943, 0.25214859843254089, -0.13290497660636902, 0.26376351714134216, 0.48094245791435242, -0.050920043140649796, -0.23113290965557098, 0.23085066676139832, 0.065118990838527679, -0.41754671931266785, -0.46163684129714966, -0.41429674625396729, -0.23836101591587067, -0.29997369647026062, 0.02266329899430275, -0.051315944641828537, -0.20730432868003845, 0.22895024716854095, 
  0.070191361010074615, -0.16641765832901001, -0.31108188629150391, -0.15327431261539459, -0.15279139578342438, -0.13876847922801971, -0.1632889062166214, -0.081979624927043915, 0.14892840385437012, -0.25597935914993286, -0.37178421020507812, 0.086436480283737183, -0.031925946474075317, 0.24281023442745209, 0.06814788281917572, -0.27915829420089722, 0.12796187400817871, -0.019798140972852707, -0.029674937948584557, -0.26856902241706848, -0.21237847208976746, -0.29564940929412842, -0.4334862232208252, 0.0087303910404443741, 0.032932557165622711, -0.022695893421769142, 0.062455311417579651, -0.023648222908377647, 0.10711374133825302, -0.305418461561203, -0.23449426889419556, -0.32075917720794678, -0.033448904752731323, -0.01969580166041851, -0.22258502244949341, -0.32807204127311707, -0.17660346627235413, -0.28386694192886353, -0.25896573066711426, 0.16989782452583313, 0.12607090175151825, -0.040830589830875397, -0.03149433434009552, -0.094868697226047516, -0.12590326368808746, -0.10928165912628174, 0.10139927268028259, -0.412698894739151, 0.0077626905404031277, -0.023038588464260101, -0.26877966523170471, -0.085231147706508636, 0.18280614912509918, 0.056835457682609558, -0.10941975563764572, 0.065483391284942627, 0.15620733797550201, -0.017018051818013191, -0.043971408158540726, 0.2670002281665802, -0.096157275140285492, -0.44813036918640137, 0.052023835480213165, -0.51308274269104004, -0.088564254343509674, -0.012423139996826649, -0.21445827186107635, -0.02189977839589119, -0.16310936212539673, 0.15366862714290619, -0.048885948956012726, 0.19918489456176758, 0.085652150213718414, 0.078782923519611359, -0.22617623209953308, 0.069951839745044708, -0.16109172999858856, -0.0038099356461316347, -0.11846502125263214, -0.33331066370010376, -0.074977926909923553, -0.021271724253892899, -0.22862043976783752, -0.1399780660867691, -0.026705019176006317, 0.061855420470237732, -0.27716130018234253, 0.12031681090593338, 0.091740086674690247, -0.031854242086410522, -0.20079976320266724, 0.0096855182200670242, 0.093171060085296631, -0.39775562286376953, -0.16897539794445038, -0.49188524484634399, -0.06790962815284729, -0.13460046052932739, -0.11940710246562958, -0.44866958260536194, -0.056991502642631531, 0.13443733751773834, -0.25438761711120605, 0.12061117589473724, 0.055504690855741501, -0.15135543048381805, -0.31049942970275879, 0.24318772554397583, 0.031132148578763008, -0.32193455100059509, 0.081640690565109253, -0.052568152546882629, 0.062150925397872925, 0.18554392457008362, -0.091367051005363464, -0.049404971301555634, -0.2634609043598175, 0.057700663805007935, -0.10398804396390915, 0.2142329216003418, 0.13265414535999298, 0.063237302005290985, -0.4499363899230957, 0.070693172514438629, 0.22635188698768616, -0.27700421214103699, -0.025156209245324135, -0.040834467858076096, 0.079740948975086212, -0.094729021191596985, 0.037918705493211746, -0.17991112172603607, -0.10173861682415009, 0.14752019941806793, -0.14417998492717743, 0.2172960638999939, 0.22898952662944794, -0.11509672552347183, -0.40814590454101562, 0.39309367537498474, -0.18605087697505951, -0.11989674717187881, 0.070804797112941742, -0.072904922068119049, 0.10641690343618393, -0.12756361067295074, -0.068533971905708313, 0.1294097900390625, -0.077397137880325317, -0.017794838175177574, -0.18881729245185852, 0.35902833938598633, 0.17112207412719727, -0.070420011878013611, 0.14850258827209473, 0.3885243833065033, 0.065068513154983521, -0.38538870215415955, 0.17439135909080505, -0.28446948528289795, 0.28508874773979187, -0.012377670966088772, 0.051533397287130356, 0.25478368997573853, -0.14711581170558929, -0.1745399534702301, -0.16150364279747009, 0.05714556947350502, 0.32228365540504456, 0.0031544817611575127, -0.22610689699649811, 0.43772110342979431, 0.15857939422130585, -0.37171158194541931, 0.10662109404802322, -0.53155636787414551, -0.051471814513206482, -0.053883317857980728, -0.2366051971912384, -0.14467525482177734, 0.3883388340473175, -0.14157296717166901, 0.16222703456878662, 0.39451155066490173, 0.49797323346138, -0.28569641709327698, -0.70919293165206909, 0.51587671041488647, -0.38676196336746216, -0.16036447882652283, 0.24180611968040466, -0.42038214206695557, 0.44920852780342102, -0.095382168889045715, -0.35444065928459167, 0.21875053644180298, 0.25647896528244019, -0.37059164047241211, -0.21098561584949493, 0.36770322918891907, 0.30938026309013367, 0.11281101405620575, -0.62193500995635986, 0.63352131843566895, -0.68542271852493286, -0.0033909622579813004, 0.47671502828598022, -0.45766615867614746, 
  0.00035004352685064077, -0.092679828405380249, 0.036614052951335907, -0.21126323938369751, 0.22811713814735413, 0.19135153293609619, 0.17121674120426178, 0.17255346477031708, 0.026006286963820457, 0.16186359524726868, 0.24785815179347992, -0.12934476137161255, 0.31117963790893555, 0.19810043275356293, 0.098603881895542145, 0.15699304640293121, 0.16168779134750366, 0.26441305875778198, 0.27245685458183289, 0.14228063821792603, 0.087798111140727997, 0.059652693569660187, 0.25933161377906799, 0.22620284557342529, 0.03872358426451683, 0.2916567325592041, 0.32512092590332031, 0.014533328823745251, -0.211783766746521, 0.043922111392021179, -0.015417217276990414, 0.27143886685371399, 0.036224592477083206, 0.16081851720809937, 0.11053965985774994, -0.068460695445537567, 0.31386712193489075, -0.12390667945146561, 0.15234214067459106, 0.021042224019765854, -0.030296552926301956, 0.032749321311712265, -0.50017309188842773, -0.20670583844184875, -0.061656508594751358, -0.10064594447612762, 0.085473895072937012, 0.0025650919415056705, 0.037497390061616898, 0.24806274473667145, 0.22034795582294464, -0.11216792464256287, -0.32850959897041321, -0.018151672556996346, 0.21133103966712952, 0.071466967463493347, 0.10539455711841583, 0.047440666705369949, 0.31001448631286621, -0.021467600017786026, -0.30113303661346436, -0.069262824952602386, 0.11418288201093674, 0.18633097410202026, 0.00044336082646623254, 0.14187505841255188, 0.11196485906839371, 0.13664118945598602, 0.20298789441585541, 0.0052840798161923885, 0.11742027103900909, -0.069231554865837097, 0.13838081061840057, 0.10310836881399155, 0.648487389087677, -0.15585716068744659, -0.25372219085693359, -0.021250791847705841, -0.010249191895127296, 0.081848233938217163, 0.041154157370328903, 0.025969440117478371, 0.065223738551139832, -0.065595120191574097, 0.024825157597661018, 0.085337154567241669, 0.046432673931121826, -0.10073427110910416, 0.021019184961915016, 0.032446920871734619, 0.52223801612854004, -0.43327367305755615, 0.085498034954071045, -0.14633601903915405, 0.003441911656409502, 0.050460070371627808, -0.095393523573875427, 0.13879445195198059, -0.050582211464643478, 0.27625635266304016, 0.02123061940073967, -0.35393017530441284, 0.11992733925580978, -0.17117087543010712, 0.04033178836107254, 0.027465192601084709, 0.21461182832717896, 0.086024634540081024, -0.13437190651893616, -0.15648925304412842, -0.15307818353176117, -0.09291936457157135, -0.056859970092773438, -0.31899398565292358, 0.078327104449272156, 0.0082378014922142029, -0.043907109647989273, -0.11187595874071121, -0.10928958654403687, -0.07324952632188797, -0.12133575230836868, -0.18812058866024017, 0.23229587078094482, 0.18223577737808228, -0.26960623264312744, -0.40595206618309021, 0.025451213121414185, -0.19015423953533173, 0.026644714176654816, 0.093269295990467072, 0.21398025751113892, -0.21698537468910217, 0.073127441108226776, -0.086891509592533112, 0.30513009428977966, -0.0027429815381765366, 0.12911312282085419, 0.080310516059398651, 0.025634696707129478, 0.084639877080917358, -0.20218971371650696, -0.5717087984085083, -0.24438469111919403, -0.29966074228286743, -0.26973414421081543, -0.24809993803501129, -0.3456612229347229, -0.35846281051635742, 0.2667350172996521, -0.37957042455673218, 0.2109529972076416, 0.024145916104316711, 0.061276078224182129, 0.015218280255794525, -0.016426805406808853, 0.057779368013143539, -0.22282078862190247, -0.60190296173095703, -0.3741975724697113, -0.53678667545318604, -0.19048836827278137, -0.42377814650535583, -0.52791875600814819, -0.36586335301399231, -0.1573081761598587, -0.3518727719783783, -0.54953455924987793, -0.35268911719322205, -0.022046763449907303, -0.33874094486236572, 0.17122775316238403, 0.089779287576675415, -0.2890489399433136, -0.40128090977668762, -0.43979516625404358, -0.57050663232803345, -0.3755028247833252, -0.24715617299079895, -0.73021626472473145, 0.071601592004299164, -0.24447152018547058, -0.45468518137931824, -0.53134578466415405, -0.35358995199203491, -0.12510862946510315, -0.16945895552635193, 0.17236544191837311, 0.34200075268745422, -0.24547098577022552, -0.61508285999298096, -0.60215228796005249, -0.60800677537918091, -0.43772783875465393, -0.19192282855510712, -0.38406673073768616, -0.058865141123533249, -0.17770682275295258, -0.16400052607059479, -0.37800171971321106, -0.48259511590003967, 0.098471768200397491, -0.25024345517158508, 0.3027612566947937, 0.37195640802383423, 0.22911117970943451, 0.046537943184375763, -0.39801642298698425, -0.5430452823638916, 
  0.31879806518554688, 0.20646208524703979, -0.067818112671375275, 0.21103622019290924, -0.096762679517269135, -0.068718381226062775, 0.13535986840724945, -0.031245371326804161, -0.090436294674873352, 0.1592811793088913, 0.085053630173206329, -0.18939213454723358, 0.21860629320144653, 0.39917469024658203, 0.090097390115261078, 0.23546092212200165, 0.1141875684261322, -0.043399572372436523, 0.084862671792507172, 0.087678581476211548, -0.14570948481559753, -0.14002920687198639, 0.033700522035360336, 0.098532088100910187, -0.082912556827068329, -0.34612563252449036, -0.16712948679924011, -0.011875204741954803, 0.12135928124189377, 0.072660207748413086, -0.014563716948032379, 0.21345937252044678, 0.030135670676827431, 0.016025751829147339, 0.14609350264072418, 0.043412350118160248, 0.010626995004713535, -0.060533855110406876, 0.18902359902858734, 0.034093655645847321, 0.035096544772386551, 0.16512410342693329, -0.00084538146620616317, 0.034243885427713394, 0.282825767993927, -0.056014839559793472, 0.058610018342733383, 0.023547826334834099, -0.19785976409912109, 0.071141719818115234, 0.023474941030144691, 0.15005284547805786, 0.21400138735771179, 0.099166706204414368, -0.030448229983448982, 0.049810491502285004, 0.10050888359546661, 0.042159464210271835, -0.22929909825325012, 0.11135753989219666, 0.20971986651420593, 0.09238087385892868, 0.065566182136535645, -0.1506434828042984, -0.04253479465842247, 0.056920778006315231, 0.088367313146591187, -0.083591945469379425, 0.14747221767902374, -0.1970820277929306, 0.10250775516033173, 0.052583921700716019, 0.066107854247093201, -0.22247329354286194, -0.13767141103744507, 0.13755375146865845, 0.069458566606044769, -0.027586473152041435, 0.054665382951498032, -0.064398325979709625, 0.073703974485397339, -0.057433370500802994, -0.018755316734313965, 0.11753035336732864, 0.15479937195777893, -0.1585029661655426, 0.035478759557008743, 0.013273444026708603, 0.11491092294454575, -0.16600202023983002, -0.23531107604503632, -0.015278100036084652, -0.25409293174743652, 0.095171049237251282, 0.082664892077445984, 0.02810211107134819, 0.063205912709236145, 0.045226525515317917, -0.0030839084647595882, 0.28186827898025513, 0.097312681376934052, 0.074450016021728516, 0.10965774208307266, 0.095986343920230865, 0.027062093839049339, -0.068232931196689606, -0.027222193777561188, 0.11251463741064072, -0.18264791369438171, 0.10778022557497025, 0.066678769886493683, -0.085193157196044922, -0.062723718583583832, -0.035133183002471924, -0.022205594927072525, 0.16799670457839966, 0.072562679648399353, 0.056464795023202896, 0.318113774061203, 0.21099495887756348, 0.052922111004590988, 0.091130539774894714, 0.11277353018522263, 0.067920826375484467, -0.22749140858650208, 0.15206135809421539, 0.22015686333179474, -0.072197407484054565, -0.11601654440164566, -0.075273826718330383, -0.092646218836307526, 0.14663082361221313, 0.082894124090671539, 0.011114566586911678, 0.00054951856145635247, -0.062086734920740128, -0.064712375402450562, -0.11123287677764893, -0.044597428292036057, 0.12171455472707748, 0.02237815223634243, 0.18653145432472229, 0.13727131485939026, 0.091301187872886658, 0.08433261513710022, -0.16812196373939514, 0.039722207933664322, -0.15431562066078186, -0.21857190132141113, -0.038083098828792572, 0.15424014627933502, -0.11578597128391266, -0.27440822124481201, -0.016983412206172943, 0.010663991793990135, 0.056996509432792664, -0.22074112296104431, 0.21609477698802948, 0.034911446273326874, 0.20600536465644836, -0.061135556548833847, -0.12421983480453491, 0.095291152596473694, -0.35135301947593689, 0.018178509548306465, 0.063507668673992157, 0.034514863044023514, -0.20890717208385468, -0.26080030202865601, 0.06369829922914505, 0.23249043524265289, -0.18124572932720184, 0.0032027296256273985, 0.1147884801030159, 0.076591722667217255, 0.067229881882667542, -0.1604737788438797, -0.16153793036937714, -0.16253139078617096, -0.51241886615753174, -0.1575714498758316, 0.083158381283283234, 0.20647637546062469, -0.12608866393566132, -0.40641942620277405, 0.037919588387012482, 0.34705421328544617, -0.45196110010147095, -0.019314475357532501, 0.20392851531505585, 0.042764816433191299, 0.16679583489894867, -0.13380439579486847, -0.23280800879001617, -0.012328676879405975, -0.10666726529598236, -0.14239536225795746, 0.13380073010921478, -0.30753564834594727, 0.026879211887717247, -0.43979090452194214, -0.11936895549297333, 0.30662772059440613, -0.62416529655456543, -0.17078027129173279, -0.038859643042087555, 0.064692594110965729, 0.037791922688484192, 
  -0.58064526319503784, 0.098852217197418213, -0.1516362726688385, 0.21171945333480835, -0.24722883105278015, 0.21590957045555115, 0.012475626543164253, -0.52452820539474487, 0.014615087769925594, 0.027566269040107727, 0.29652920365333557, 0.1704384833574295, -0.31776002049446106, -0.63007223606109619, -0.8115612268447876, -0.18775495886802673, -0.81554436683654785, -0.45356070995330811, -0.50429040193557739, -0.53510749340057373, 0.068661309778690338, 0.40240409970283508, -0.48590341210365295, -0.047209136188030243, -0.25608125329017639, -0.013826934620738029, -0.29150199890136719, 0.029929809272289276, -0.42360597848892212, 0.037157207727432251, -0.10440438240766525, -0.42969641089439392, -0.26723819971084595, -0.47609701752662659, -0.024307852610945702, -0.47452348470687866, 0.18113052845001221, 0.014024908654391766, -0.0023517594672739506, 0.069219864904880524, -0.27357792854309082, -0.21440409123897552, -0.038255184888839722, -0.16760669648647308, -0.22027018666267395, 0.1301516592502594, 0.23375421762466431, 0.10756220668554306, -0.03885558620095253, -0.31476697325706482, 0.20073036849498749, -0.38169974088668823, -0.10287623852491379, -0.14408878982067108, -0.037432931363582611, -0.063159845769405365, -0.29747140407562256, -0.60134202241897583, -0.043988581746816635, -0.11778217554092407, -0.20815524458885193, 0.20190770924091339, 0.055411659181118011, 0.12822604179382324, 0.082716077566146851, -0.03411092609167099, 0.19701692461967468, -0.029690645635128021, 0.24801704287528992, -0.25804024934768677, 0.039628595113754272, 0.089847512543201447, -0.018084673210978508, -0.17333336174488068, -0.30495926737785339, -0.22523732483386993, -0.055160637944936752, 0.12263616174459457, 0.11976645886898041, 0.094515196979045868, 0.036380186676979065, 0.059903692454099655, 0.022887784987688065, 0.044156212359666824, 0.25324007868766785, -0.44180360436439514, -0.0033067110925912857, 0.011934829875826836, 0.15100198984146118, 0.066502891480922699, 0.085573121905326843, -0.2746540904045105, 0.1779198944568634, 0.13754455745220184, 0.033559951931238174, 0.031355876475572586, 0.21250393986701965, 0.13652138411998749, 0.092670179903507233, -0.0068719037808477879, 0.002692218404263258, -0.6271369457244873, 0.1220562532544136, -0.028554169461131096, -0.014438746497035027, -0.054109547287225723, -0.012670278549194336, -0.13322311639785767, 0.22294069826602936, 0.1737721860408783, 0.096682086586952209, 0.1756616085767746, 0.032007396221160889, 0.16128997504711151, 0.16614574193954468, 0.18105208873748779, 0.18176424503326416, 0.033092990517616272, 0.14402879774570465, 0.051238667219877243, 0.050561275333166122, 0.095080018043518066, 0.13555800914764404, -0.24544201791286469, -0.021045025438070297, 0.039731491357088089, 0.04753885418176651, 0.011770074255764484, 0.11625867336988449, 0.25591704249382019, 0.11746059358119965, 0.28279691934585571, 0.1571049839258194, 0.13895256817340851, 0.051402416080236435, 0.01384313590824604, -0.050515361130237579, 0.06656917929649353, 0.14778406918048859, -0.24795663356781006, 0.080099232494831085, -0.42739591002464294, -0.18715684115886688, 0.020239580422639847, 0.20786449313163757, 0.075981810688972473, 0.093415118753910065, 0.22163468599319458, 0.23128654062747955, 0.087393738329410553, 0.49790272116661072, 0.043118327856063843, -0.26313364505767822, 0.21091549098491669, -0.05908796563744545, -0.68329071998596191, -0.34540316462516785, -0.1069147139787674, -0.15488749742507935, 0.039617978036403656, 0.13133151829242706, -0.015753988176584244, 0.16441023349761963, 0.37148430943489075, 0.57223302125930786, 0.041211634874343872, 0.38032859563827515, -0.1482231467962265, -0.11724859476089478, 0.11740296334028244, -0.1552690714597702, -0.59932327270507812, -0.13223874568939209, 0.32522734999656677, -0.1132594496011734, -0.29098573327064514, 0.20878072082996368, 0.13710404932498932, 0.11757144331932068, 0.50922608375549316, 0.24192041158676147, 0.21829196810722351, 0.41830217838287354, 0.13310277462005615, -0.068885110318660736, 0.3182271420955658, -0.22734251618385315, -0.26213893294334412, -0.18654465675354004, -0.10291282832622528, 0.074896536767482758, 0.10748869925737381, 0.27117565274238586, 0.37768089771270752, 0.0846213698387146, -0.10837986320257187, 0.33937528729438782, 0.32456234097480774, 0.22886277735233307, 0.38517779111862183, 0.25692504644393921, 0.55306720733642578, -0.72650331258773804, -0.33133983612060547, 0.17581559717655182, 0.0050608147867023945, 0.05512179434299469, -0.18709968030452728, 
};
const TfArray<2, int> tensor_dimension11 = { 2, { 5,208 } };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,50,13 } };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,50,8 } };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,50,1,8 } };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,25,1,8 } };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,25,8 } };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,25,16 } };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,25,1,16 } };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,13,1,16 } };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,208 } };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,5 } };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,5 } };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,3 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,7,1 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,4 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,5 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,8,2 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,6 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,10 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,11,9 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 2608), (TfLiteIntArray*)&g0::tensor_dimension0, 2600, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 64, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 16, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 16, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 16, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 16, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1248, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 1536, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 20, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 8, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 4160, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension12, 2600, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 2608), (TfLiteIntArray*)&g0::tensor_dimension13, 1600, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension14, 1600, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 1600), (TfLiteIntArray*)&g0::tensor_dimension15, 800, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension16, 800, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 1600), (TfLiteIntArray*)&g0::tensor_dimension17, 1600, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension18, 1600, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 1600), (TfLiteIntArray*)&g0::tensor_dimension19, 832, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension20, 832, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 832), (TfLiteIntArray*)&g0::tensor_dimension21, 20, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension22, 20, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 23, };
const size_t tflNodes_subgraph_index[] = {0, 11, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  22, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization.type = kTfLiteNoQuantization;

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
